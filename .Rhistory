sol2 <- solveLP(f.obj, f.b2, f.A2, maximum = TRUE, const.dir = f.dir2) #solver
sol2bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A2, const.dir = f.dir2, const.rhs = f.b2)
summary(sol2)
sol2$con
## ------------------------------------------------------------------------
#To see solution on the original dataset
# df[which(sol2$solution != 0),] %>%
#   arrange(Casino, tipo) %>%
#   View()
# Vincolo 3 - preprocessing
## ------------------------------------------------------------------------
#Calcola i bin per le giocate totali del casino Libra, per differenziare dai bin di Aries
quartili.aries <- c(quantile(df[df$Casino == "Aries", ]$"giocate_totali", probs = seq(0, 1, by = 0.25)))
quartili.libra <- c(quantile(df[df$Casino == "Libra", ]$"giocate_totali", probs = seq(0, 1, by = 0.25)))
#Check dataset ordering --> arrange(Month, Section, MachineType, Denomination, Casino)
head(df, n = 100)
head(arrange(df, Month, Section, MachineType, Denomination, Casino), n = 100) #ok, e' cosi'
# split dataset based on casino, to differentiate bins
aries.idx <- which(df$Casino == "Aries")
aries <- df[aries.idx,]
libra <- df[-aries.idx,]
# Create bins based on total plays, include lowest value, and display digits instead of scientific notation
aries$bin_giocate <- cut(aries$giocate_totali, breaks = quartili.aries, include.lowest = T, dig.lab=10)
libra$bin_giocate <- cut(libra$giocate_totali, breaks = quartili.libra, include.lowest = T, dig.lab=10)
# merge the two casino into the original dataset, with the additional column bin_giocate
df <- rbind(aries, libra) %>% arrange(Month, Section, MachineType, Denomination, Casino)
# reorder columns, set bin_giocate next to giocate_totali
df[c(1:9, 13, 10:12)]
# Confirm ordering is the same as before
all(which(df$Casino == "Aries") == aries.idx)
bin_stats <- df %>%
group_by(bin_giocate, Casino) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine)) %>%
#arrange(Casino, desc(bin_giocate)) #non funziona bene come ordinamento
arrange(Casino, media_macchine) #meglio
# Vincolo 3 - vincola il numero di slot di ogni categoria tra un min e max calcolato per gruppi di slot che condividono uno stesso range di numero di giocate.
# create all combinations of ...
f.A3 <- diag(nrow(df))
f.A3 <- as.tibble(f.A3) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
b <- c()
for (i in 1:nrow(df)) {
#get the correct row index to identify the bin reference
idx <- match(df[i,"bin_giocate"], bin_stats$bin_giocate)
# create vector of constraint coefficient, lower then upper bounds
b <- append(b, bin_stats[idx, "minimo_macchine"])
b <- append(b, bin_stats[idx, "massimo_macchine"])
}
f.b3 <- unlist(b, use.names=FALSE)
f.dir3 <- rep(c(">=", "<="), dim(df)[1]) # direction of the inequalities
sol3 <- solveLP(f.obj, f.b3, f.A3, maximum = TRUE, const.dir = f.dir3) # Va in loop, quello sotto no.
sol3bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A3, const.dir = f.dir3, const.rhs = f.b3)
#sol3$con
summary(sol3)
sol3bis
#check if A3 is equal to f.A3 -> all(A3 == f.A3) FALSE
## ------------------------------------------------------------------------
f.A <- rbind(f.A1, f.A2, f.A3)
f.b <- c(f.b1, f.b2, f.b3)
f.dir <- c(f.dir1, f.dir2, f.dir3)
sol <- solveLP(f.obj, f.b, f.A, maximum = TRUE, const.dir = f.dir) #solver
#sol.bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A, const.dir = f.dir, const.rhs = f.b)
#sol$solution
#sol.bis
#summary(sol)
#shadow_price <- sol$con
return(sol)
}
s <- solver(data = df, month = ymd('2010-09-01'))
s <- solver(data = df, month = ymd('2011-09-01'))
s
s$con
View(solver)
nslots <- df %>%
group_by(Month, Casino) %>%
summarise(sum = sum(numero_macchine)) %>%
arrange(Month) #ensure order
View(nslots)
data <- df
df <- filter(data, Month == month)
month <- ymd('2012-09-01')
df <- filter(data, Month == month)
numslots.section <- df %>%
group_by(Month, Casino, Section) %>%
summarise(sum = sum(numero_macchine),
ricavo = sum(ricavi_totali)) %>%
#il mutate perde un livello dopo il summarise
mutate(sum_casino = sum(sum), prop_per_mese = round(sum / sum(sum), 3))
#Ottieni numero di slot presenti in ogni casino per mese da usare come upper bound
numslots.casino <- NULL #a cosa serve ?
nslots <- df %>%
group_by(Month, Casino) %>%
summarise(sum = sum(numero_macchine)) %>%
arrange(Month) #ensure order
nslots <- nslots$sum #numero di slot per casino e mese
## ------------------------------------------------------------------------
f.obj <- round(df$ricavo_unitario)
## ------------------------------------------------------------------------
#First create dummy var for Casino and month, used to activate each constraint depending on the casino and month
f.A1 <- t(predict(dummyVars(~ Casino, data = df), newdata = df))
df
df <- filter(data, Month == month)
month <- ymd('2011-09-01')
df <- filter(data, Month == month)
numslots.section <- df %>%
group_by(Month, Casino, Section) %>%
summarise(sum = sum(numero_macchine),
ricavo = sum(ricavi_totali)) %>%
#il mutate perde un livello dopo il summarise
mutate(sum_casino = sum(sum), prop_per_mese = round(sum / sum(sum), 3))
#Ottieni numero di slot presenti in ogni casino per mese da usare come upper bound
numslots.casino <- NULL #a cosa serve ?
nslots <- df %>%
group_by(Month, Casino) %>%
summarise(sum = sum(numero_macchine)) %>%
arrange(Month) #ensure order
nslots <- nslots$sum #numero di slot per casino e mese
## ------------------------------------------------------------------------
f.obj <- round(df$ricavo_unitario)
## ------------------------------------------------------------------------
#First create dummy var for Casino and month, used to activate each constraint depending on the casino and month
f.A1 <- t(predict(dummyVars(~ Casino, data = df), newdata = df))
f.A1
#Coefficients
b1 <- nslots #month1-> casino1, month1 ->casino2, month2 -> casino1, ...
b1
f.b1 <-  b1# vector of right-hand side values - upper bounds of total number of slots per month
f.dir1 <- rep("<=", length(f.b1)) # direction of the inequalities
## ------------------------------------------------------------------------
f.A2 <- t(predict(dummyVars(~ Section : Casino, data = df), newdata = df))
# Duplicate every row, needed because for each section/month/casino we need a lower and upper bound.
# Retain order --> ob1-low, obs1-up, obs2-low, ...)
f.A2 <- as.tibble(f.A2) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
vincoli.names <- c()
vincoli.names <- c(vincoli.names, "Aries", "Libra")
length(sol$con)
dim(sol$con)
rownames(sol$con)[1:2] <- c("Aries", "Libra")
shadow_price <- sol$con
vincolo1 <- shadow_price[1:2,]
knitr::kable(vincolo1)
vincolo2 <- shadow_price[3:18,]
knitr::kable(vincolo2)
expand.grid(1:3, 1:5)
expand.grid(unique(df$Casino), unique(df$Section))
concat <- function(x) paste0(x[,1], '_', x[,2], '_', 'low-up')
concat(expand.grid(unique(df$Casino), unique(df$Section)))
expand.grid(unique(df$Casino), unique(df$Section), c('low', 'up'))
expand.grid(c('low', 'up'), unique(df$Casino), unique(df$Section), )
expand.grid(c('low', 'up'), unique(df$Casino), unique(df$Section) )
concat <- function(x) paste0(x[,2], '_', x[,3], '_', x[,1])
concat(v)
# l'ordine dei nostri vincoli
v <- expand.grid(c('low', 'up'), unique(df$Casino), unique(df$Section))
v <- expand.grid(c('low', 'up'), unique(df$Casino), unique(df$Section))
# l'ordine dei nostri vincoli
concat(v)
rownames(sol$con)[3:18] <- concat(v)
vincolo2 <- shadow_price[3:18,]
knitr::kable(vincolo2)
expand.grid(c('low', 'up'), unique(df$Casino), unique(df$Section), unique(df$MachineType), unique(df$Denomination))
vincoli.names <- with(df, paste(Casino,Section,MachineType,Denomination, sep="_"))
vincoli.names
third <- as.tibble(vincoli.names) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
thirds
third
third <- as.tibble(vincoli.names) %>% slice(rep(1:n(), each = 2))# %>% as.matrix()
third
third <- vincoli.names %>% slice(rep(1:n(), each = 2))# %>% as.matrix()
third <- as.tibble(vincoli.names) %>% slice(rep(1:n(), each = 2))
expand.grid(third$value, c('low','up'))
expand.grid(c('low','up'),third$value)
expand.grid(c('low','up'), unique(third$value))
expand.grid(c('low','up'), vincoli.name))
expand.grid(c('low','up'), vincoli.name)
expand.grid(c('low','up'), vincoli.names)
third <- expand.grid(c('low','up'), vincoli.names)
third <- with(third, paste(Var2, Var1, sep = "."))
third
vincoli.names <- with(df, paste(Casino,Section,MachineType,Denomination, sep="_"))
# l'ordine del secodno vincolo
v <- expand.grid(c('low', 'up'), unique(df$Casino), unique(df$Section))
second <- concat(second)
# l'ordine del secodno vincolo
second <- expand.grid(c('low', 'up'), unique(df$Casino), unique(df$Section))
concat <- function(x) paste0(x[,2], '_', x[,3], '.', x[,1])
second <- concat(second)
rownames(sol$con)[3:18] <- second
third <- expand.grid(c('low','up'), vincoli.names)
third <- with(third, paste(Var2, Var1, sep = "."))
rownames(sol$con)[19:dim(sol$con)[1]] <- third
rownames(sol$con)
concat <- function(x) paste0(x[,2], '_', x[,3], '.', x[,1])
second <- concat(second)
rownames(sol$con) <- rbind(first, second, third)
rbind(first, second, third)
first <- c("Aries", "Libra")
second <- expand.grid(c('low', 'up'), unique(df$Casino), unique(df$Section))
concat <- function(x) paste0(x[,2], '_', x[,3], '.', x[,1])
second <- concat(second)
third <- expand.grid(c('low','up'), vincoli.names)
third <- with(third, paste(Var2, Var1, sep = "."))
rownames(sol$con) <- rbind(first, second, third)
rbind(first, second, third)
rownames(sol$con) <- c(first, second, third)
shadow_price <- sol$con
vincolo1 <- shadow_price[1:2,]
knitr::kable(vincolo1)
vincolo2 <- shadow_price[3:18,]
knitr::kable(vincolo2)
second <- expand.grid(c('low', 'up'), unique(df$Section), unique(df$Casino))
concat <- function(x) paste0(x[,2], '_', x[,3], '.', x[,1])
second <- concat(second)
third <- expand.grid(c('low','up'), vincoli.names)
third <- with(third, paste(Var2, Var1, sep = "."))
rownames(sol$con) <- c(first, second, third)
sol <- sols$`2011-09-01`
rownames(sol$con) <- c(first, second, third)
shadow_price <- sol$con
vincolo1 <- shadow_price[1:2,]
knitr::kable(vincolo1)
vincolo2 <- shadow_price[3:18,]
knitr::kable(vincolo2)
## ------------------------------------------------------------------------
f.A2 <- t(predict(dummyVars(~ Section : Casino, data = df), newdata = df))
f.A2
group_by(df, Section, Casino) %>% summarise(min=min(numero_macchine), max=max(numero_macchine))
group_by(df, Section, Casino) %>% summarise(min=min(numero_macchine), max=max(numero_macchine), sum=sum(numero_macchine))
group_by(df, Casino, Section) %>% summarise(min=min(numero_macchine), max=max(numero_macchine), sum=sum(numero_macchine))
ggplot(data = tre, aes(x = tipo, y = ricavo_unitario, colour = Section)) +
#geom_point(alpha = .6) +
geom_jitter(alpha = .8) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione") +
theme(axis.text.x = element_text(angle = 40, hjust = .8)) +
facet_wrap(~Casino)
tre <- df %>% select(Section, tipo, ricavo_unitario)
ggplot(data = tre, aes(x = tipo, y = ricavo_unitario, colour = Section)) +
#geom_point(alpha = .6) +
geom_jitter(alpha = .8) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione") +
theme(axis.text.x = element_text(angle = 40, hjust = .8)) +
facet_wrap(~Casino)
tre <- data %>% select(Section, tipo, ricavo_unitario)
ggplot(data = tre, aes(x = tipo, y = ricavo_unitario, colour = Section)) +
#geom_point(alpha = .6) +
geom_jitter(alpha = .8) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione") +
theme(axis.text.x = element_text(angle = 40, hjust = .8)) +
facet_wrap(~Casino)
ggplot(data = tre, aes(x = tipo, y = ricavo_unitario, colour = Section)) +
#geom_point(alpha = .6) +
geom_jitter(alpha = .8) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione", title = "Distribuzione dei ricavi mensili delle slot per categoria e sezione") +
theme(axis.text.x = element_text(angle = 40, hjust = .8)) +
facet_wrap(~Casino)
ggplot(data = tre, aes(x = tipo, y = ricavo_unitario, colour = Section)) +
#geom_point(alpha = .6) +
geom_jitter(alpha = .8) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione", title = "Distribuzione dei ricavi mensili delle slot per categoria e sezione nei due casino", subtitle = "Casino") +
theme(axis.text.x = element_text(angle = 40, hjust = .8)) +
facet_wrap(~Casino)
ggplot(data = tre, aes(x = tipo, y = ricavo_unitario, colour = Section)) +
#geom_point(alpha = .6) +
geom_jitter(alpha = .8) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione", title = "Distribuzione dei ricavi mensili delle slot per categoria e sezione nei due casino", subtitle.center = "Casino") +
theme(axis.text.x = element_text(angle = 40, hjust = .8)) +
facet_wrap(~Casino)
vincolo3 <- shadow_price[19:length(shadow_price[,1]),]
rownames(vincolo3) <- 1:length(vincolo3[,1])
knitr::kable(head(vincolo3))
shadow_price[,1]
shadow_price <- sol$con
knitr::kable(head(sol$con))
sol <- sols$`2011-09-01`
rownames(sol$con) <- c(first, second, third)
shadow_price <- sol$con
vincolo1 <- shadow_price[1:2,]
knitr::kable(vincolo1)
vincolo2 <- shadow_price[3:18,]
knitr::kable(vincolo2)
knitr::kable(head(tail(sol$con, n = 156))
knitr::kable(head(tail(sol$con, n = 156)))
knitr::kable(tail(sol$con, n = 156))
View(df)
sol$con
sol$con[1]
rownames(sol$con)
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
n
g
split(x, g)
x <- rnorm(n * nn) + sqrt(as.numeric(g))
x
xg <- split(x, g)
xg
split(x, g)
g
boxplot(xg, col = "lavender", notch = TRUE, varwidth = TRUE)
sapply(xg, length)
sapply(xg, mean)
### Calculate 'z-scores' by group (standardize to mean zero, variance one)
z <- unsplit(lapply(split(x, g), scale), g)
z
zz <- x
split(zz, g) <- lapply(split(x, g), scale)
# and check that the within-group std dev is indeed one
tapply(z, g, sd)
tapply(zz, g, sd)
xg
ggplot(data = tre, aes(x = tipo, y = ricavo_unitario, colour = Section)) +
#geom_point(alpha = .6) +
geom_jitter(alpha = .8) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione", title = "Distribuzione dei ricavi mensili delle slot per categoria e sezione nei due casino", subtitle = "Casino") +
theme(axis.text.x = element_text(angle = 40, hjust = .8)) +
facet_wrap(~Casino)
knitr::kable(vincolo3[vincolo3$actual == vincolo3$bvec & vincolo3$dir == "<=", ])
length(shadow_price[,1]
length(shadow_price)
length(shadow_price)
dim(shadow_price)[1]
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
knitr::kable(tail(sol$con, n = dim(shadow_price)[1]-18)) #escludi i primi 18 vincoli
knitr::kable(tail(vincolo3, n = dim(shadow_price)[1]-18)) #escludi i primi 18 vincoli
knitr::kable(vincolo3) #escludi i primi 18 vincoli
knitr::kable(vincolo3[vincolo3$actual == vincolo3$bvec & vincolo3$dir == "<=", ])
ggplot(data = tre, aes(x = tipo, y = ricavo_unitario, colour = Section)) +
#geom_point(alpha = .6) +
geom_jitter(alpha = .8) +
labs(x="Categoria", y="Ricavo unitario", colour = "Sezione", title = "Distribuzione dei ricavi mensili delle slot per categoria e sezione nei due casino", subtitle = "Casino") +
theme(axis.text.x = element_text(angle = 40, hjust = .8)) +
facet_wrap(~Casino)
group_by(df, Section, Casino, MachineType, Denomination) %>% summarise(sum = sum(numero_macchine))
knitr::kable(vincolo3, group_by(df, Section, Casino, MachineType, Denomination) %>% summarise(sum = sum(numero_macchine))) #escludi i primi 18 vincoli
group_by(df, Section, Casino, MachineType, Denomination) %>% summarise(sum = sum(numero_macchine))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
knitr::kable(vincolo3)
knitr::kable(group_by(df, Section, Casino, MachineType, Denomination) %>% summarise(sum = sum(numero_macchine)))
knitr::kable(group_by(df, Section, MachineType, Denomination, Casino) %>% summarise(sum = sum(numero_macchine)))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
knitr::kable(vincolo3)
knitr::kable(group_by(df, Section, MachineType, Denomination, Casino) %>% summarise(sum = sum(numero_macchine)))
list(vincolo3, group_by(df, Section, MachineType, Denomination, Casino) %>% summarise(sum = sum(numero_macchine))))
list(vincolo3, group_by(df, Section, MachineType, Denomination, Casino) %>% summarise(sum = sum(numero_macchine)))
knitr::kable(list(vincolo3, group_by(df, Section, MachineType, Denomination, Casino) %>% summarise(sum = sum(numero_macchine))))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
slots_sum <- group_by(df, Section, MachineType, Denomination, Casino) %>% summarise(sum = sum(numero_macchine))
knitr::kable(head(vincolo3, n = 20))
knitr::kable(head(slots_sum, n = 10))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
slots_sum <- group_by(df, Section, tipo, Casino) %>% summarise(sum = sum(numero_macchine))
knitr::kable(head(vincolo3, n = 20))
knitr::kable(head(slots_sum, n = 10))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
slots_sum <- group_by(df, Section, tipo, Casino) %>% summarise(sum = sum(numero_macchine))
knitr::kable(head(vincolo3, n = 20))
knitr::kable(head(slots_sum, n = 20))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
slots_sum <- group_by(df, Section, tipo, Casino) %>% summarise(sum = sum(numero_macchine))
knitr::kable(head(vincolo3, n = 20))
knitr::kable(head(slots_sum, n = 30))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
slots_sum <- group_by(df, Section, tipo, Casino) %>% summarise(sum = sum(numero_macchine))
knitr::kable(head(vincolo3, n = 20))
knitr::kable(head(slots_sum, n = 40))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
slots_sum <- group_by(df, Section, tipo, Casino) %>% summarise(sum = sum(numero_macchine))
knitr::kable(head(vincolo3, n = 20))
knitr::kable(head(slots_sum, n = 50))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
slots_sum <- group_by(df, Section, tipo, Casino) %>% summarise(sum = sum(numero_macchine))
knitr::kable(head(vincolo3, n = 20))
knitr::kable(head(slots_sum, n = 60))
knitr::kable(vincolo3[vincolo3$actual == vincolo3$bvec & vincolo3$dir == "<=", ])
head(slots_sum[tipo=="reel_0.25"])
head(slots_sum[tipo=="reel_0.25",])
head(slots_sum[slots_sum$tipo=="reel_0.25"])
head(slots_sum[slots_sum$tipo=="reel_0.25",])
slots_sum[slots_sum$tipo=="reel_0.25",]
bin_stats <- df %>%
group_by(bin_giocate, Casino) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
slots_sum <- group_by(df, Section, tipo, Casino) %>% summarise(sum = sum(numero_macchine))
knitr::kable(head(vincolo3, n = 20))
knitr::kable(head(slots_sum, n = 60))
vincolo3 <- shadow_price[19:dim(shadow_price)[1],]
slots_sum <- group_by(df, Section, tipo, Casino) %>% summarise(sum = sum(numero_macchine))
knitr::kable(head(vincolo3, n = 20))
ricavi_mese = df %>%
group_by(Month, Casino) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)),
ricavo_medio_per_giocata = sum(ricavi_totali)/sum(giocate_totali))
ggplot(data=ricavi_mese, aes(x=Month, y = ricavo_medio_unitario, color=Casino)) +
geom_line(alpha=.5, size=1) +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ggplot(data=ricavi_mese, aes(x=Month, y = ricavo_medio_per_giocata, color=Casino)) +
geom_line(alpha=.5, size=1) +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio per giocata") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Casino)) +
geom_point(alpha=.4, size=4) +
ggtitle("Pi? macchine hai pi? guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_mese = data %>%
group_by(Month, Casino) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)),
ricavo_medio_per_giocata = sum(ricavi_totali)/sum(giocate_totali))
ggplot(data=ricavi_mese, aes(x=Month, y = ricavo_medio_unitario, color=Casino)) +
geom_line(alpha=.5, size=1) +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ggplot(data=ricavi_mese, aes(x=Month, y = ricavo_medio_per_giocata, color=Casino)) +
geom_line(alpha=.5, size=1) +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio per giocata") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Casino)) +
geom_point(alpha=.4, size=4) +
ggtitle("Pi? macchine hai pi? guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_mese = df %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Pi? macchine hai pi? guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
ricavi_mese = data %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Pi? macchine hai pi? guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
