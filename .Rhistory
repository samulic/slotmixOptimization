library(tidyverse)
library(lubridate)
library(caret)
library(linprog)
options(scipen = 999)
slot <- readxl::read_excel("data/Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
head(df)
df %>% ggplot(aes(x = giocate_totali, y = ricavo_per_giocata)) +
geom_point()
df[df$"ricavo_per_giocata" > 5,]
#Funziona tutto anche includendolo..
df <- filter(df, Month = ymd("2011-09-01"))
#Funziona tutto anche includendolo..
df <- filter(df, Month == ymd("2011-09-01")) #!=
numslots.section <- df %>%
group_by(Month, Casino, Section) %>%
summarise(sum = sum(numero_macchine),
ricavo = sum(ricavi_totali)) %>%
#il mutate perde un livello dopo il summarise
mutate(sum_casino = sum(sum), prop_per_mese = round(sum / sum(sum), 3))
ggplot(data = numslots.section, aes(x = sum, y = prop_per_mese)) +
geom_point(aes(color = Casino, size = ricavo)) +
ggtitle("Distribuzione della proporzione del numero di slot sul totale del casino per ogni mese") +
xlab("Numero slot per sezione (per mese)") +
ylab("Proporzione di slot in ogni mese") #+ facet_wrap(~Section)
#Ottieni numero di slot presenti in ogni casino per mese da usare come upper bound
numslots.casino <- NULL
nslots <- df %>%
group_by(Month, Casino) %>%
summarise(sum = sum(numero_macchine)) %>%
arrange(Month) #ensure order
nslots <- nslots$sum #numero di slot per casino e mese
f.obj <- round(df$ricavo_unitario)
#First create dummy var for Casino and month, used to activate each constraint depending on the casino and month
f.A1 <- t(predict(dummyVars(~ Casino : I(factor(Month)), data = df), newdata = df))
#First create dummy var for Casino and month, used to activate each constraint depending on the casino and month
f.A1 <- t(predict(dummyVars(~ Casino), data = df), newdata = df)
#First create dummy var for Casino and month, used to activate each constraint depending on the casino and month
f.A1 <- t(predict(dummyVars(~ Casino, data = df), newdata = df))
#View(rbind(t(df[, "Casino"]), t(df$Month), f.A)) #Check results
#with one month don't require " : I(factor(Month)" after Casino
#Coefficients
b1 <- nslots #month1-> casino1, month1 ->casino2, month2 -> casino1, ...
f.b1 <-  b1# vector of right-hand side values - upper bounds of total number of slots per month
f.dir1 <- rep("<=", length(f.b1)) # direction of the inequalities
sol1 <- solveLP(f.obj, f.b1, f.A1, maximum = TRUE, const.dir = f.dir1) #solver
sol1bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A1, const.dir = f.dir1, const.rhs = f.b1)
sol1$con
f.A2 <- t(predict(dummyVars(~ Section : Casino : factor(Month), data = df), newdata = df))
f.A2 <- t(predict(dummyVars(~ Section : Casino, data = df), newdata = df))
#with one month don't require " : factor(Month)" after Casino
# Duplicate every row, needed because for each section/month/casino we need a lower and upper bound.
# Retain order --> ob1-low, obs1-up, obs2-low, ...)
f.A2 <- as.tibble(f.A2) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
#I vincoli sono attivati nel seguente modo
# mese1-casino1-sez1-low,
# mese1-casino1-sez1-up,
# mese1-casino1-sez2;
# mese1-casino2;
# mese2;...
# quindi i primi 8 (4 sez * 2 up/low) vincoli sono associato ad un medesimo upper e lower bound, legato al primo valore di nslots.
#nslots contiene il numero di slot per ogni casino e mese, alternato per casino (mese1 casino1, mese1 casino2, mese2 casino1, ...)
# combine nslots in two columns, where rows are months and columns are casino (first for Aries)
(numslots <- matrix(nslots, ncol = 2, byrow = T))
f.b2 <- c()
month_prop <- numslots.section %>%
group_by(Month, Casino) %>% summarise(prop_min = min(prop_per_mese),
prop_max = max(prop_per_mese))
b2 <- cbind(nslots, month_prop$prop_min, month_prop$prop_max)
colnames(b2) <- NULL #altrimenti errore nel solver
# to check correctness, compare with
#View(numslots.section)
f.b2 <- c()
# probabilmente si puo' fare senza il ciclo for, ma come??
for (i in 1:nrow(b2)) {
f.b2 <- c(f.b2, rep(round(c(b2[i,1]*b2[i,2], b2[i,1]*b2[i,3])), 4))
}
f.dir2 <- rep(c(">=", "<="), length(f.b2)/2) # direction of the inequalities
sol2 <- solveLP(f.obj, f.b2, f.A2, maximum = TRUE, const.dir = f.dir2) #solver
sol2bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A2, const.dir = f.dir2, const.rhs = f.b2)
sol2$con
##################################
# DECISION MODELS
# Federico Comotto
# Massimiliano Scardovelli C.
# Gabriele Caldara
# Eugenio Andreose
################################
options(scipen = 999) #tolgo la notazione scientifica
library(rstudioapi)
#Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
print(getwd())
library(readxl)
slot = read_excel("Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
#alcuni pacchetti
library(funModeling)
library(dplyr)
library(lubridate)
#status
status = df_status(slot, print_results = F)
summary(slot$Month) #12 mesi
###################
# CATEGORIZATION
##################
tot = slot %>%
group_by(Casino, Denomination, MachineType, Section, Month) %>%
summarise(numero_macchine = sum(NoMachines),
ricavi_totali = sum(GrossRevenue),
ricavo_unitario = ricavi_totali/numero_macchine,
giocate_totali = sum(Plays),
giocate_unitarie = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
tot = as.data.frame(tot)
#################
# EXPLORATION
################
ricavi_mese = tot %>%
group_by(Month) %>%
summarise(ricavo_medio_totale = mean(ricavi_totali),
ricavo_medio_unitario = mean(ricavo_unitario),
numero_macchine_medie = mean(numero_macchine),
varianza_macchine = sqrt(var(numero_macchine)))
ggplot(data=ricavi_mese, aes(x=ricavi_mese$Month, y = ricavi_mese$ricavo_medio_unitario)) +
geom_line(alpha=.5, size=1, color="#880011") +
ggtitle("Ricavi per Mese di LDE") +
labs(x="Mese", y="Ricavo medio unitario") +
theme_classic()
#NO ANDAMENTO LINEARE
#NB: le linee servono per sottolineare il fenomeno altalenante. Non esiste rilevazione infra mese.
ricavi_mese$Month = as.factor(ricavi_mese$Month)
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_totale,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Più macchine hai più guadagni? In linea di massima SI!") +
labs(x="Numero medio macchine", y="Ricavi medi totali") +
theme_minimal()
#In generale vale più macchine hai più guadagni
ggplot(data=ricavi_mese, aes(x=ricavi_mese$numero_macchine_medie,
y=ricavi_mese$ricavo_medio_unitario,
colour = Month)) +
geom_point(alpha=.4, size=4) +
ggtitle("Tante macchine non significa ricavi unitari elevati!") +
labs(x="Numero medio macchine", y="Ricavi medi unitari") +
theme_minimal()
#è comunque utile analizzare i ricavi indipendentemente dalla capienza, ergo i ricavi unitari.
ricavi_categoria = tot %>%
group_by(Denomination, MachineType) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario)) %>%
mutate(type = paste0(Denomination,sep = "_", MachineType))
ggplot(data=ricavi_categoria, aes(x=ricavi_categoria$type, y = ricavi_categoria$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Categoria di LDE") +
labs(x="Categoria", y="Ricavo medio unitario") +
theme_classic() #[QUESTO DEVE ESSERE UN BAR PLOT]
ricavi_sezione = tot %>%
group_by(Section) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_sezione, aes(x=ricavi_sezione$Section, y = ricavi_sezione$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Sezione di LDE") +
labs(x="Sezione", y="Ricavo medio unitario") +
theme_classic() #[QUESTO DEVE ESSERE UN BAR PLOT]
ricavi_casino = tot %>%
group_by(Casino) %>%
summarise(ricavo_medio_unitario = mean(ricavo_unitario))
ggplot(data=ricavi_casino, aes(x=ricavi_casino$Casino, y = ricavi_casino$ricavo_medio_unitario)) +
geom_point(alpha=.5, size=3, color="#880011") +
ggtitle("Ricavi per Casino di LDE") +
labs(x="Casino", y="Ricavo medio unitario") +
theme_classic() #[QUESTO DEVE ESSERE UN BAR PLOT]
tot %>%
group_by(tipo) %>%
summarise(n = n()) %>%
View()
#14 categorie al massimo
tot %>% group_by(Casino, tipo, Section, Month) %>%
summarise(n = n()) %>%
arrange(tipo, Section) %>%
group_by(Section) %>%
summarise(n = n()) %>%
View()
#numero totale categorie per sezione di LDE nell'arco dei 12 mesi
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Casino, Section) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
#numero medio di categorie per sezione nell'arco dei 12 mesi
tot %>% group_by(Casino, Section, Month) %>%
summarise(n = n()) %>%
arrange(Casino, Section) %>%
group_by(Month) %>%
summarise(Numero_medio_categorie = mean(n), Varianza_numero_categorie = sqrt(var(n))) %>%
View()
#numero medio di categorie per mese
##########################
# MODELING: settembre
##########################
set = tot %>%
filter(Month == ymd("2011-09-01")) %>%
arrange(Casino)
set = as.data.frame(set)
f_obj = round(set$ricavo_unitario) #ricavi unitari = da MAX
#quante macchine ci sono ogni mese nei 2 casino?
tot %>%
group_by(Casino, Month) %>%
summarise(n_macchine = sum(numero_macchine)) %>%
arrange(Month) %>%
View()
#Vincolo 1: numero massimo di macchine per casino nel mese di settembre
library(caret)
Vincolo1 =  function(df){
"df = dataset del mese
dummy + trasposizione"
A = predict(dummyVars(~ Casino, data = df), newdata = df)
A = t(A)
return(A)
} #approccio valido se ho una sola colonna
A = Vincolo1(set)
#Vettore B del modello lineare
b = c(849, 230) #upper bound
constraints = c("<=", "<=")
library(linprog)
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints) #solver
#risultato 1
summary(sol)
shadow_price = sol$con
#risultato sul dataset
set[which(sol$solution != 0),] %>%
arrange(Casino, tipo) %>%
View()
#Avendo solo questo vincolo le macchine vengo piazzate dove il ricavo unitario è massimo. Mi sembra ragionevole
#E'chiaro che occorre tenere in considerazione altri vincoli.
#Vincolo 2: proporzione macchine in ciascuna sezione dei 2 Casino
set %>%
group_by(Casino, Section) %>%
summarise(Num_macchine = sum(numero_macchine)) %>%
mutate(prop_per_mese = round(Num_macchine / sum(Num_macchine), 2)) %>%
View()
#Per Aries ciascuna sezione deve avere un numero di macchine: 0.2 >= x <= 0.3
#Per Libra ciascuna sezione deve avere un numero di macchine: 0.15 >= x <= 0.35
#Si tratta di valori arbitrari dedotti dai dati
#Matrice A:
#1) creo un vettore di 1 e di 0 -> dove le variabilid decisionali sono attive varrà 1 altrimenti 0;
#2) popolo la matrice A (modello lineare) attraverso il vettore creato
Vincolo2 = function(df){
"df = dataset del mese"
"funzione per costruire il vincolo 2"
x = unique(df$Section)
y = unique(df$Casino)
a = c()
for (t in 1:length(y)) {
for (i in 1:length(x)) {
for (k in 1:2) {
a = append(a, ifelse(df$Section == x[i] & df$Casino == y[t], 1, 0))
}
}
}
A = matrix(a,16,78, byrow = T)
return(A)
}
#Vincolo 2
A1 = Vincolo2(set)
#Vincolo 1 e Vincolo 2 (Matrice A)
A = rbind(A, A1)
#Vettore B aggiornato
b = c(b,
rep(c(round(0.2*849), round(0.3*849)), 4), rep(c(round(0.15*230), round(0.35*230)), 4))
constraints = c(constraints,
rep(c(">=", "<="), 8))
#Risultato 2
sol <- solveLP(f_obj, b, A, maximum = TRUE, constraints)
summary(sol)
shadow_price = sol$con
View(sol)
View(shadow_price)
View(f.A2)
View(b2)
round(849*0.22)
View(month_prop)
View(numslots.section)
summary(sol2)
sol2 <- solveLP(f.obj, f.b2, f.A2, maximum = TRUE, const.dir = f.dir2) #solver
summary(sol2)
sol2$con
summary(sol2)
sol2$con
# Da notare, rispetto alla soluzione precedente, l'ordine in dummyVars differente
f.A2 <- t(predict(dummyVars(~ Casino : Section : factor(Month), data = df), newdata = df))
# Da notare, rispetto alla soluzione precedente, l'ordine in dummyVars differente
f.A2 <- t(predict(dummyVars(~ Casino : Section, data = df), newdata = df))
# see previous ": factor(Month)"
# Duplicate every row, needed because for each section/month/casino we need a lower and upper bound.
# Retain order --> ob1-low, obs1-up, obs2-low, ...)
f.A2 <- as.tibble(f.A2) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
#I vincoli sono attivati nel seguente modo
# mese1-casino1-sez1-low,
# mese1-casino1-sez1-up,
# mese1-casino2-sez1;
# mese1-casino1-sez2;
# mese2;...
#nslots contiene il numero di slot per ogni casino e mese, alternato per casino (mese1 casino1, mese1 casino2, mese2 casino1, ...)
# combine nslots in two columns, where rows are months and columns are casino (first for Aries)
numslots <- matrix(nslots, ncol = 2, byrow = T)
f.b2 <- c()
# probabilmente si puo' fare senza il ciclo for, ma come??
for (i in 1:nrow(numslots)) {
f.b2 <- c(f.b2, rep(round(c(numslots[i,1]*.2, numslots[i,1]*.32, numslots[i,2]*0.18, numslots[i,2]*0.35)), 4))
}
f.dir2 <- rep(c(">=", "<="), length(f.b2)/2) # direction of the inequalities
sol2 <- solveLP(f.obj, f.b2, f.A2, maximum = TRUE, const.dir = f.dir2) #solver
sol2bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A2, const.dir = f.dir2, const.rhs = f.b2)
sol2$con
View(f.A2)
y <- predict(dummyVars(~ Casino : Section), data = df)
y <- predict(dummyVars(~ Casino : Section, data = df), newdata = df)
y
View(y)
View(df)
f.A2 <- t(predict(dummyVars(~ Section : Casino, data = df), newdata = df))
#with one month don't require " : factor(Month)" after Casino
# Duplicate every row, needed because for each section/month/casino we need a lower and upper bound.
# Retain order --> ob1-low, obs1-up, obs2-low, ...)
f.A2 <- as.tibble(f.A2) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
#I vincoli sono attivati nel seguente modo
# mese1-casino1-sez1-low,
# mese1-casino1-sez1-up,
# mese1-casino1-sez2;
# mese1-casino2;
# mese2;...
# quindi i primi 8 (4 sez * 2 up/low) vincoli sono associato ad un medesimo upper e lower bound, legato al primo valore di nslots.
#nslots contiene il numero di slot per ogni casino e mese, alternato per casino (mese1 casino1, mese1 casino2, mese2 casino1, ...)
# combine nslots in two columns, where rows are months and columns are casino (first for Aries)
(numslots <- matrix(nslots, ncol = 2, byrow = T))
f.b2 <- c()
month_prop <- numslots.section %>%
group_by(Month, Casino) %>% summarise(prop_min = min(prop_per_mese),
prop_max = max(prop_per_mese))
b2 <- cbind(nslots, month_prop$prop_min, month_prop$prop_max)
colnames(b2) <- NULL #altrimenti errore nel solver
# to check correctness, compare with
#View(numslots.section)
f.b2 <- c()
# probabilmente si puo' fare senza il ciclo for, ma come??
for (i in 1:nrow(b2)) {
f.b2 <- c(f.b2, rep(round(c(b2[i,1]*b2[i,2], b2[i,1]*b2[i,3])), 4))
}
f.dir2 <- rep(c(">=", "<="), length(f.b2)/2) # direction of the inequalities
sol2 <- solveLP(f.obj, f.b2, f.A2, maximum = TRUE, const.dir = f.dir2) #solver
sol2bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A2, const.dir = f.dir2, const.rhs = f.b2)
summary(sol2)
sol2$con
View(f.A2)
View(f.A2)
y
# Da notare, rispetto alla soluzione precedente, l'ordine in dummyVars differente
f.A2 <- t(predict(dummyVars(~ Casino : Section, data = df), newdata = df))
# see previous ": factor(Month)". In this case i think that putting before Section or Casino doesn't change the result.
# Duplicate every row, needed because for each section/month/casino we need a lower and upper bound.
# Retain order --> ob1-low, obs1-up, obs2-low, ...)
f.A2 <- as.tibble(f.A2) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
#I vincoli sono attivati nel seguente modo
# mese1-casino1-sez1-low,
# mese1-casino1-sez1-up,
# mese1-casino2-sez1;
# mese1-casino1-sez2;
# mese2;...
#nslots contiene il numero di slot per ogni casino e mese, alternato per casino (mese1 casino1, mese1 casino2, mese2 casino1, ...)
# combine nslots in two columns, where rows are months and columns are casino (first for Aries)
numslots <- matrix(nslots, ncol = 2, byrow = T)
f.b2 <- c()
# probabilmente si puo' fare senza il ciclo for, ma come??
for (i in 1:nrow(numslots)) {
f.b2 <- c(f.b2, rep(round(c(numslots[i,1]*.2, numslots[i,1]*.32, numslots[i,2]*0.18, numslots[i,2]*0.35)), 4))
}
f.dir2 <- rep(c(">=", "<="), length(f.b2)/2) # direction of the inequalities
sol2 <- solveLP(f.obj, f.b2, f.A2, maximum = TRUE, const.dir = f.dir2) #solver
sol2bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A2, const.dir = f.dir2, const.rhs = f.b2)
sol2$con
#Calcola i bin per le giocate totali del casino Libra, per differenziare dai bin di Aries
quartili.aries <- c(quantile(df[df$Casino == "Aries", ]$"giocate_totali", probs = seq(0, 1, by = 0.25)))
quartili.libra <- c(quantile(df[df$Casino == "Libra", ]$"giocate_totali", probs = seq(0, 1, by = 0.25)))
#Check dataset ordering --> arrange(Month, Section, MachineType, Denomination, Casino)
head(df, n = 100)
head(arrange(df, Month, Section, MachineType, Denomination, Casino), n = 100) #ok, e' cosi'
# split dataset based on casino, to differentiate bins
aries.idx <- which(df$Casino == "Aries")
aries <- df[aries.idx,]
libra <- df[-aries.idx,]
# Create bins based on total plays, include lowest value, and display digits instead of scientific notation
aries$bin_giocate <- cut(aries$giocate_totali, breaks = quartili.aries, include.lowest = T, dig.lab=10)
libra$bin_giocate <- cut(libra$giocate_totali, breaks = quartili.libra, include.lowest = T, dig.lab=10)
# merge the two casino into the original dataset, with the additional column bin_giocate
df <- rbind(aries, libra) %>% arrange(Month, Section, MachineType, Denomination, Casino)
# reorder columns, set bin_giocate next to giocate_totali
df[c(1:9, 13, 10:12)]
# Confirm ordering is the same as before
all(which(df$Casino == "Aries") == aries.idx)
bin_stats <- df %>%
group_by(bin_giocate, Casino) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine)) %>%
#arrange(Casino, desc(bin_giocate)) #non funziona bene come ordinamento
arrange(Casino, media_macchine) #meglio
#Non funzia
par(mfrow = c(2, 4))
for (b in unique(df$bin_giocate)) {
ggplot(data = df[df$bin_giocate == b,], aes(x = "b", y = numero_macchine)) +
geom_boxplot()
}
par(mfrow = c(1,1))
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
