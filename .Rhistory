sol.bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A, const.dir = f.dir, const.rhs = f.b)
#sol$solution
#summary(sol)
sol.bis
df.double <- df %>% slice(rep(1:n(), each = 2))
df.double$f.b3 <- f.b3
View(df.double)
# create all combinations of ...
f.A3 <- t(predict(dummyVars(~ bin_giocate : factor(Denomination) : MachineType :Casino: Section, data = df), newdata = df))
# we must remove empty rows (that is no observation matches the combination,
# think for example about bins belonging to another Casino, they will still be computed but with no matching observation)
# exclude all rows that have all zeros (sum is not more than zero)
f.A3 <- f.A3[rowSums(f.A3[,])>0, ]
# check dimension, it should have a number of rows equal to the number of observation in the dataset
# since we are constraining each Month/Casino/Section/category(tipo) of slots, that is how our dataset is constructed
dim(f.A3) #bingo!
# Nowm duplicate every row, needed because we need to set a lower and upper bound for the number of slots.
# Retain order --> ob1-low, obs1-up, obs2-low, ...)
f.A3 <- diag(nrow(df))
f.A3 <- as.tibble(f.A3) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
b <- c()
for (i in 1:nrow(df)) {
#get the correct row index to identify the bin reference
idx <- match(df[i,"bin_giocate"], bin_stats$bin_giocate)
# create vector of constraint coefficient, lower then upper bounds
b <- c(b, bin_stats[idx, "minimo_macchine"], bin_stats[idx, "massimo_macchine"])
}
#result b vector is list, because bin_stats is a dataframe (tibble to be precise)
#f.b3 <- unlist(b, use.names=FALSE)
f.dir3 <- rep(c(">=", "<="), dim(df)[1]) # direction of the inequalities
# length should be equal to the length of the constraints' coefficient
length(f.dir3)
#sol3 <- solveLP(f.obj, f.b3, f.A3, maximum = TRUE, const.dir = f.dir3) # Va in loop, quello sotto no.
sol3bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A3, const.dir = f.dir3, const.rhs = f.b3)
#sol3$con
#summary(sol3)
sol3bis
f.A <- rbind(f.A1, f.A2, f.A3)
f.b <- c(f.b1, f.b2, f.b3)
f.dir <- c(f.dir1, f.dir2, f.dir3)
#sol <- solveLP(f.obj, f.b, f.A, maximum = TRUE, const.dir = f.dir) #solver
sol.bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A, const.dir = f.dir, const.rhs = f.b)
#sol$solution
#summary(sol)
sol.bis
df.double <- df %>% slice(rep(1:n(), each = 2))
df.double$f.b3 <- f.b3
View(df.double)
df.double <- df %>% slice(rep(1:n(), each = 2))
df.double$f.b3 <- 3
View(df.double)
df.double <- df %>% slice(rep(1:n(), each = 2))
df.double$f.b3 <- b
View(df.double)
bin_stats
idxs <- c(idxs, idx)
for (i in 1:nrow(df)) {
#get the correct row index to identify the bin reference
idx <- match(df[i,"bin_giocate"], bin_stats$bin_giocate)
idxs <- c(idxs, idx)
# create vector of constraint coefficient, lower then upper bounds
b <- c(b, bin_stats[idx, "minimo_macchine"], bin_stats[idx, "massimo_macchine"])
}
idxs <- c()
for (i in 1:nrow(df)) {
#get the correct row index to identify the bin reference
idx <- match(df[i,"bin_giocate"], bin_stats$bin_giocate)
idxs <- c(idxs, idx)
# create vector of constraint coefficient, lower then upper bounds
b <- c(b, bin_stats[idx, "minimo_macchine"], bin_stats[idx, "massimo_macchine"])
}
idxs
bin_stats
bin_stats
df$bin_giocate
for (i in 1:nrow(df)) {
#get the correct row index to identify the bin reference
idx <- match(df[i,"bin_giocate"], bin_stats$bin_giocate)
idxs <- c(idxs, idx)
# create vector of constraint coefficient, lower then upper bounds
b <- c(b, unlist(bin_stats[idx, "minimo_macchine"], use.names = F), unlist(bin_stats[idx, "massimo_macchine"],  use.names = F))
}
f.dir3 <- rep(c(">=", "<="), dim(df)[1]) # direction of the inequalities
# length should be equal to the length of the constraints' coefficient
length(f.dir3)
#sol3 <- solveLP(f.obj, f.b3, f.A3, maximum = TRUE, const.dir = f.dir3) # Va in loop, quello sotto no.
sol3bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A3, const.dir = f.dir3, const.rhs = f.b3)
#sol3$con
#summary(sol3)
sol3bis
f.A <- rbind(f.A1, f.A2, f.A3)
f.b <- c(f.b1, f.b2, f.b3)
f.dir <- c(f.dir1, f.dir2, f.dir3)
#sol <- solveLP(f.obj, f.b, f.A, maximum = TRUE, const.dir = f.dir) #solver
sol.bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A, const.dir = f.dir, const.rhs = f.b)
#sol$solution
#summary(sol)
sol.bis
df.double <- df %>% slice(rep(1:n(), each = 2))
df.double$f.b3 <- f.b3
View(df.double)
View(df)
f.b3
bin_stats
library(tidyverse)
library(lubridate)
library(caret)
library(linprog)
options(scipen = 999)
slot <- readxl::read_excel("data/Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
head(df)
df %>% ggplot(aes(x = giocate_totali, y = ricavo_per_giocata)) +
geom_point()
df[df$"ricavo_per_giocata" > 5,]
numslots.section <- df %>%
group_by(Month, Casino, Section) %>%
summarise(sum = sum(numero_macchine),
ricavo = sum(ricavi_totali)) %>%
#il mutate perde un livello dopo il summarise
mutate(sum_casino = sum(sum), prop_per_mese = round(sum / sum(sum), 3))
ggplot(data = numslots.section, aes(x = sum, y = prop_per_mese)) +
geom_point(aes(color = Casino, size = ricavo)) +
ggtitle("Distribuzione della proporzione del numero di slot per mese per ogni sezione") +
xlab("Numero slot per sezione (per mese)") +
ylab("Proporzione di slot in ogni mese per casino'") #+ facet_wrap(~Section)
#Ottieni numero di slot presenti in ogni casino per mese da usare come upper bound
nslots <- df %>%
group_by(Month, Casino) %>%
summarise(sum = sum(numero_macchine)) %>%
arrange(Month) #ensure order
nslots <- nslots$sum #numero di slot per casino e mese
sep <- filter(df, Month == ymd("2011-09-01"))
quartile.bySect <- ddply(sep, c("Month", "Casino", "Section"), transform, bin_giocate = cut(giocate_totali, breaks = 5))
library(dplyr)
sep <- filter(df, Month == ymd("2011-09-01"))
quartile.bySect <- ddply(sep, c("Month", "Casino", "Section"), transform, bin_giocate = cut(giocate_totali, breaks = 5))
names(bin_giocate.bysect)
library(dplyr)
quartile.bySect <- ddply(sep, c("Month", "Casino", "Section"), transform, bin_giocate = cut(giocate_totali, breaks = 5))
??ddply
library(dplyr)
bin_giocate.bysect <- plyr::ddply(df, .(Month, Casino, Section), function(x) quantile(x$giocate_totali))
library(plyr)
bin_giocate.bysect <- plyr::ddply(df, .(Month, Casino, Section), function(x) quantile(x$giocate_totali))
sep <- filter(df, Month == ymd("2011-09-01"))
quartile.bySect <- ddply(sep, c("Month", "Casino", "Section"), transform, bin_giocate = cut(giocate_totali, breaks = 5))
names(bin_giocate.bysect)
bin_giocate.bysect %>% group_by(Casino) %>%
summarize(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
quartile.bySect %>%
group_by(bin_giocate) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
quartile.bySect
quartile.bySect %>%
dplyr::group_by(bin_giocate) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
typeof(quartile.bySect)
head(quartile.bySect)
quartile.bySect %>%
dplyr::group_by(factor(bin_giocate)) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
unique(quartile.bySect$bin_giocate)
quartile.bySect <- ddply(sep, c("Month", "Casino", "Section"), transform, bin_giocate = cut(giocate_totali, breaks = 4))
head(quartile.bySect)
quartile.bySect <- ddply(sep, c("Month", "Casino", "Section"), transform, bin_giocate = cut(giocate_totali, breaks = 4, include.lowest = T, dig.lab=10))
head(quartile.bySect)
unique(quartile.bySect$bin_giocate)
quartile.bySect %>%
dplyr::group_by(factor(bin_giocate)) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
sep %>% group_by(Casino) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
library(tidyverse)
library(lubridate)
library(caret)
library(linprog)
options(scipen = 999)
slot <- readxl::read_excel("data/Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
head(df)
df %>% ggplot(aes(x = giocate_totali, y = ricavo_per_giocata)) +
geom_point()
df[df$"ricavo_per_giocata" > 5,]
numslots.section <- df %>%
group_by(Month, Casino, Section) %>%
summarise(sum = sum(numero_macchine),
ricavo = sum(ricavi_totali)) %>%
#il mutate perde un livello dopo il summarise
mutate(sum_casino = sum(sum), prop_per_mese = round(sum / sum(sum), 3))
ggplot(data = numslots.section, aes(x = sum, y = prop_per_mese)) +
geom_point(aes(color = Casino, size = ricavo)) +
ggtitle("Distribuzione della proporzione del numero di slot per mese per ogni sezione") +
xlab("Numero slot per sezione (per mese)") +
ylab("Proporzione di slot in ogni mese per casino'") #+ facet_wrap(~Section)
#Ottieni numero di slot presenti in ogni casino per mese da usare come upper bound
nslots <- df %>%
group_by(Month, Casino) %>%
summarise(sum = sum(numero_macchine)) %>%
arrange(Month) #ensure order
nslots <- nslots$sum #numero di slot per casino e mese
library(plyr)
bin_giocate.bysect <- ddply(df, .(Month, Casino, Section), function(x) quantile(x$giocate_totali))
sep <- filter(df, Month == ymd("2011-09-01"))
quartile.bySect <- ddply(sep, c("Month", "Casino", "Section"), transform, bin_giocate = cut(giocate_totali, breaks = 4, include.lowest = T, dig.lab=10))
head(quartile.bySect)
unique(quartile.bySect$bin_giocate)
quartile.bySect %>%
dplyr::group_by(factor(bin_giocate)) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
sep %>% group_by(Casino) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination)
library(tidyverse)
library(lubridate)
library(caret)
library(linprog)
options(scipen = 999)
slot <- readxl::read_excel("data/Lucky Duck Entertainment revenue 2013.xls", na = c(".", "NA", "NaN"))
str(slot)
df <- slot %>%
group_by(Month, Casino, Section, MachineType, Denomination) %>%
summarise(numero_macchine    = sum(NoMachines),
ricavi_totali      = sum(GrossRevenue),
ricavo_unitario    = ricavi_totali/numero_macchine,
giocate_totali     = sum(Plays),
giocate_unitarie   = round(giocate_totali/numero_macchine),
ricavo_per_giocata = ricavi_totali/giocate_totali) %>%
arrange(Month, Section, MachineType, Denomination) %>%
mutate(tipo = paste0(MachineType, "_", Denomination))
head(df)
df %>% ggplot(aes(x = giocate_totali, y = ricavo_per_giocata)) +
geom_point()
df[df$"ricavo_per_giocata" > 5,]
bin_giocate.bysect <- plyr::ddply(df, .(Month, Casino, Section), function(x) quantile(x$giocate_totali))
sep %>% group_by(Casino) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
sep <- filter(df, Month == ymd("2011-09-01"))
sep %>% group_by(Casino) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
quartile.bySect <- plyr::ddply(sep, c("Month", "Casino", "Section"), transform, bin_giocate = cut(giocate_totali, breaks = 4, include.lowest = T, dig.lab=10))
head(quartile.bySect)
unique(quartile.bySect$bin_giocate)
quartile.bySect %>%
dplyr::group_by(factor(bin_giocate)) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
quartile.bySect %>%
group_by(factor(bin_giocate)) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
sep <- plyr::ddply(sep, c("Month", "Casino", "Section"), transform, bin_giocate = cut(giocate_totali, breaks = 4, include.lowest = T, dig.lab=10))
head(sep)
unique(sep$bin_giocate)
sep %>%
group_by(factor(bin_giocate)) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
bin_stats <- sep %>%
group_by(factor(bin_giocate)) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine))
bin_stats <- df %>%
group_by(bin_giocate, Casino) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine)) %>%
#arrange(Casino, desc(bin_giocate)) #non funziona bene come ordinamento
arrange(Casino, media_macchine) #meglio
## ------------------------------------------------------------------------
# function to optimize winnings for the given month
solver <- function(data, month) {
df <- filter(data, Month == ymd(month))
numslots.section <- df %>%
group_by(Month, Casino, Section) %>%
summarise(sum = sum(numero_macchine),
ricavo = sum(ricavi_totali)) %>%
#il mutate perde un livello dopo il summarise
mutate(sum_casino = sum(sum), prop_per_mese = round(sum / sum(sum), 3))
# ggplot(data = numslots.section, aes(x = sum, y = prop_per_mese)) +
#   geom_point(aes(color = Casino, size = ricavo)) +
#   ggtitle("Distribuzione della proporzione del numero di slot sul totale del casino per ogni mese") +
#   xlab("Numero slot per sezione (per mese)") +
#   ylab("Proporzione di slot in ogni mese") #+ facet_wrap(~Section)
#Ottieni numero di slot presenti in ogni casino per mese da usare come upper bound
numslots.casino <- NULL #a cosa serve ?
nslots <- df %>%
group_by(Month, Casino) %>%
summarise(sum = sum(numero_macchine)) %>%
arrange(Month) #ensure order
nslots <- nslots$sum #numero di slot per casino e mese
## ------------------------------------------------------------------------
f.obj <- round(df$ricavo_unitario)
## ------------------------------------------------------------------------
#First create dummy var for Casino and month, used to activate each constraint depending on the casino and month
f.A1 <- t(predict(dummyVars(~ Casino, data = df), newdata = df))
#View(rbind(t(df[, "Casino"]), t(df$Month), f.A)) #Check results
#with one month don't require " : I(factor(Month)" after Casino
#Coefficients
b1 <- nslots #month1-> casino1, month1 ->casino2, month2 -> casino1, ...
f.b1 <-  b1# vector of right-hand side values - upper bounds of total number of slots per month
f.dir1 <- rep("<=", length(f.b1)) # direction of the inequalities
sol1 <- solveLP(f.obj, f.b1, f.A1, maximum = TRUE, const.dir = f.dir1) #solver
sol1bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A1, const.dir = f.dir1, const.rhs = f.b1)
sol1$con
sol1$solution
## ------------------------------------------------------------------------
f.A2 <- t(predict(dummyVars(~ Section : Casino, data = df), newdata = df))
#with one month don't require " : factor(Month)" after Casino
# Duplicate every row, needed because for each section/month/casino we need a lower and upper bound.
# Retain order --> ob1-low, obs1-up, obs2-low, ...)
f.A2 <- as.tibble(f.A2) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
#I vincoli sono attivati nel seguente modo
# mese1-casino1-sez1-low,
# mese1-casino1-sez1-up,
# mese1-casino1-sez2;
# mese1-casino2;
# mese2;...
# quindi i primi 8 (4 sez * 2 up/low) vincoli sono associato ad un medesimo upper e lower bound, legato al primo valore di nslots.
#nslots contiene il numero di slot per ogni casino e mese, alternato per casino (mese1 casino1, mese1 casino2, mese2 casino1, ...)
# combine nslots in two columns, where rows are months and columns are casino (first for Aries)
(numslots <- matrix(nslots, ncol = 2, byrow = T))
f.b2 <- c()
month_prop <- numslots.section %>%
group_by(Month, Casino) %>% summarise(prop_min = min(prop_per_mese),
prop_max = max(prop_per_mese))
b2 <- cbind(nslots, month_prop$prop_min, month_prop$prop_max)
colnames(b2) <- NULL #altrimenti errore nel solver
# to check correctness, compare with
#View(numslots.section)
f.b2 <- c()
# probabilmente si puo' fare senza il ciclo for, ma come??
for (i in 1:nrow(b2)) {
f.b2 <- append(f.b2, rep(round(c(b2[i,1]*b2[i,2], b2[i,1]*b2[i,3])), 4))
}
f.dir2 <- rep(c(">=", "<="), length(f.b2)/2) # direction of the inequalities
sol2 <- solveLP(f.obj, f.b2, f.A2, maximum = TRUE, const.dir = f.dir2) #solver
sol2bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A2, const.dir = f.dir2, const.rhs = f.b2)
summary(sol2)
sol2$con
## ------------------------------------------------------------------------
# Da notare, rispetto alla soluzione precedente, l'ordine in dummyVars differente
f.A2 <- t(predict(dummyVars(~ Casino : Section, data = df), newdata = df))
# see previous ": factor(Month)". In this case i think that putting Section or Casino first doesn't change the result.
# Duplicate every row, needed because for each section/month/casino we need a lower and upper bound.
# Retain order --> ob1-low, obs1-up, obs2-low, ...)
f.A2 <- as.tibble(f.A2) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
#I vincoli sono attivati nel seguente modo
# mese1-casino1-sez1-low,
# mese1-casino1-sez1-up,
# mese1-casino2-sez1;
# mese1-casino1-sez2;
# mese2;...
#nslots contiene il numero di slot per ogni casino e mese, alternato per casino (mese1 casino1, mese1 casino2, mese2 casino1, ...)
# combine nslots in two columns, where rows are months and columns are casino (first for Aries)
numslots <- matrix(nslots, ncol = 2, byrow = T)
f.b2 <- c()
# probabilmente si puo' fare senza il ciclo for, ma come??
for (i in 1:nrow(numslots)) {
f.b2 <- c(f.b2, rep(round(c(numslots[i,1]*.2, numslots[i,1]*.32, numslots[i,2]*0.18, numslots[i,2]*0.35)), 4))
}
f.dir2 <- rep(c(">=", "<="), length(f.b2)/2) # direction of the inequalities
sol2 <- solveLP(f.obj, f.b2, f.A2, maximum = TRUE, const.dir = f.dir2) #solver
sol2bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A2, const.dir = f.dir2, const.rhs = f.b2)
summary(sol2)
sol2$con
#To see solution on the original dataset
# df[which(sol2$solution != 0),] %>%
#   arrange(Casino, tipo) %>%
#   View()
# Vincolo 3 - preprocessing
## ------------------------------------------------------------------------
df <- plyr::ddply(df, c("Month", "Casino", "Section"), transform,
bin_giocate = cut(giocate_totali, breaks = 4, include.lowest = T, dig.lab=10))
head(df)
unique(df$bin_giocate) # 32 -> 1 month * 2 casino * 4 sections * 4 breaks
df[c(1:9, 13, 10:12)]
bin_stats <- df %>%
group_by(bin_giocate, Casino) %>%
summarise(minimo_macchine = min(numero_macchine),
massimo_macchine = max(numero_macchine),
media_macchine = mean(numero_macchine),
mediana_macchine = median(numero_macchine),
totale_macchine = sum(numero_macchine)) %>%
#arrange(Casino, desc(bin_giocate)) #non funziona bene come ordinamento
arrange(Casino, media_macchine) #meglio
## ------------------------------------------------------------------------
# Vincolo 3
## ------------------------------------------------------------------------
f.A3 <- diag(nrow(df))
f.A3 <- as.tibble(f.A3) %>% slice(rep(1:n(), each = 2)) %>% as.matrix()
b <- c()
for (i in 1:nrow(df)) {
# get the correct row index to identify the bin reference
idx <- match(df[i,"bin_giocate"], bin_stats$bin_giocate)
# create vector of constraint coefficient, lower then upper bounds
b <- append(b, bin_stats[idx, "minimo_macchine"])
b <- append(b, bin_stats[idx, "massimo_macchine"])
}
f.b3 <- unlist(b, use.names=FALSE)
f.dir3 <- rep(c(">=", "<="), dim(df)[1]) # direction of the inequalities
#check if A3 is equal to f.A3 -> all(A3 == f.A3) FALSE
## ------------------------------------------------------------------------
f.A <- rbind(f.A1, f.A2, f.A3)
f.b <- c(f.b1, f.b2, f.b3)
f.dir <- c(f.dir1, f.dir2, f.dir3)
sol <- solveLP(f.obj, f.b, f.A, maximum = TRUE, const.dir = f.dir) #solver
#sol.bis <- lp(direction = "max", objective.in = f.obj, const.mat = f.A, const.dir = f.dir, const.rhs = f.b)
#sol$solution
#sol.bis
#summary(sol)
#shadow_price <- sol$con
return(sol)
}
# create empty list to store each month's result
sols <- alist()
# choose which months to use (all months present in the dataset)
months <- unique(df$Month)
# apply foreach month, the function solver to the original dataframe df (solver will filter for each month)
sols <- lapply(months, FUN = solver, data = df)
# give names to the list of solutions
names(sols) <- months
sols[["2012-03-01"]]
# get the optimum found for each month
sapply(sols, `[[`, "opt")
# get the optimum found for each month
sapply(sols, `[[`, "opt")
getwd()
setwd("/home/samuli/Projects/ds/new/slotmixOptimization")
save(df, sols, solver, file = "solutions.RData")
